(window.webpackJsonp=window.webpackJsonp||[]).push([[136],{388:function(e,t,a){"use strict";a.r(t);var s=a(1),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"memcached简易安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memcached简易安装","aria-hidden":"true"}},[e._v("#")]),e._v(" memcached简易安装")]),e._v(" "),a("p",[e._v("Memcached是什么?")]),e._v(" "),a("p",[e._v("Memcached 是一个高性能的分布式内存对象缓存系统，用于动态Web应用以减轻数据库负载。它通过在内存中缓存数据和对象来减少读取数据库的次数，从而提供动态、数据库驱动网站的速度。")]),e._v(" "),a("p",[e._v("简单来说就是把数据缓存在内存之中，用户读取直接从内存读取，减轻数据库压力！（ps：服务器内存要有足够大）")]),e._v(" "),a("p",[e._v("闲话不多说，下面开始安装")]),e._v(" "),a("p",[e._v("用 getconf LONG_BIT 来查看机子多少位")]),e._v(" "),a("p",[e._v("下载libevent、memcached")]),e._v(" "),a("pre",[a("code",[e._v("wget http://www.danga.com/memcached/dist/memcached-1.2.6.tar.gz\nwget http://www.monkey.org/~provos/libevent-1.2.tar.gz\n")])]),e._v(" "),a("p",[e._v("解包")]),e._v(" "),a("pre",[a("code",[e._v("cd /usr/local\nmkdir libevent\nmkdir memcached\ntar -xzvf libevent-1.2.tar.gz\ntar -xzvf memcached-1.2.6.tar.gz\n")])]),e._v(" "),a("p",[e._v("处理libevent")]),e._v(" "),a("pre",[a("code",[e._v("cd /usr/local/libevent-1.2/\n./configure &#8211;prefix=/usr/local/libevent\nmake;make install\n")])]),e._v(" "),a("p",[e._v("处理memcached")]),e._v(" "),a("pre",[a("code",[e._v("cd /usr/local/memcached-1.2.6/\n./configure &#8211;prefix=/usr/local/memcached &#8211;with-libevent=/usr/local/libevent\nmake ;make install\nll /usr/local/libevent/lib/\n")])]),e._v(" "),a("p",[e._v("存在类似如下文件")]),e._v(" "),a("pre",[a("code",[e._v("libevent-1.2.so.1 -> libevent-1.2.so.1.0.3\nlibevent-1.2.so.1.0.3\nlibevent.a\nlibevent.la\nlibevent.so -> libevent-1.2.so.1.0.3\n")])]),e._v(" "),a("p",[e._v("32位机")]),e._v(" "),a("pre",[a("code",[e._v("ln -s /usr/local/libevent/lib/libevent-1.2.so.1 /usr/lib\n")])]),e._v(" "),a("p",[e._v("64位机")]),e._v(" "),a("pre",[a("code",[e._v("ln -s /usr/local/libevent/lib/libevent-1.2.so.1 /usr/lib64\n")])]),e._v(" "),a("p",[e._v("查看帮助")]),e._v(" "),a("pre",[a("code",[e._v("cd /usr/local/memcached\n\n/usr/local/memcached/bin/memcached -h\n")])]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("memcached "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.2")]),e._v(".6\n\n-p "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("num"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" TCP port number to listen on "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("default: "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("11211")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n-U "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("num"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" UDP port number to listen on "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("default: "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(", off"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n-s "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("file"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" unix socket path to listen on "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("disables network support"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n-a "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("mask"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" access mask "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" unix socket, "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" octal "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("default 0700"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n-l "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("ip"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("_addr"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" interface to listen on, default is INDRR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("_ANY\n\n-d run as a daemon\n\n-r maximize core "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("file")]),e._v(" limit\n\n-u "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("username"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" assume identity of "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("username"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("only when run as root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n-m "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("num"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" max memory to use "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[e._v("items")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" megabytes, default is "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("64")]),e._v(" MB\n\n-M "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("return")]),e._v(" error on memory exhausted "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("rather than removing items"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n-c "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("num"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" max simultaneous connections, default is "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1024")]),e._v("\n\n-k lock down all paged memory. Note that there is a\n\nlimit on how much memory you may lock. Trying to\n\nallocate "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("more")]),e._v(" than that would fail, so be sure you\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" the limit correctly "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" the user you started\n\nthe daemon with "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("not "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" -u "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("username"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\nunder "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sh")]),e._v(" this is "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("done")]),e._v(" with "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#8216;ulimit -S -l NUM_KB&#8217;).")]),e._v("\n\n-v verbose "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("print errors/warnings "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" event loop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n-vv very verbose "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("also print client commands/reponses"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n-h print this "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("help")]),e._v(" and "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exit")]),e._v("\n\n-i print memcached and libevent license\n\n-b run a managed instanced "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("mnemonic: buckets"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n-P "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("file"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" save PID "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("file"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(", only used with -d option\n\n-f "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("factor"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" chunk size growth factor, default "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.25")]),e._v("\n\n-n "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("bytes"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" minimum space allocated "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" key+value+flags, default "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("48")]),e._v("\n")])])]),a("p",[e._v("出现如上信息是，表明安装正常")]),e._v(" "),a("p",[e._v("启动memcache：")]),e._v(" "),a("pre",[a("code",[e._v("/usr/local/memcached/bin/memcached -d -m 512 -u root -l 192.168.1.1 -p 11211 -c 1000 -P /tmp/memcached.pid\n")])]),e._v(" "),a("p",[e._v("启动参数说明：")]),e._v(" "),a("p",[e._v("-d 选项是启动一个守护进程，")]),e._v(" "),a("p",[e._v("-m 是分配给Memcache使用的内存数量，单位是MB，默认64MB")]),e._v(" "),a("p",[e._v("-u 是运行Memcache的用户，如果当前为root 的话，需要使用此参数指定用户")]),e._v(" "),a("p",[e._v("-l   是监听的服务器IP地址，默认为所有网卡")]),e._v(" "),a("p",[e._v("-p 是设置Memcache的TCP监听的端口，最好是1024以上的端口")]),e._v(" "),a("p",[e._v("-c 选项是最大运行的并发连接数，默认是1024")]),e._v(" "),a("p",[e._v("-P 是设置保存Memcache的pid文件")]),e._v(" "),a("p",[e._v("当然也有很多可选参数通过./memcached -help来查看帮助")]),e._v(" "),a("p",[e._v("也可以启动多个守护进程，但是端口不能重复")]),e._v(" "),a("p",[e._v("8.停止Memcache进程：")]),e._v(" "),a("pre",[a("code",[e._v("ps aux |grep memcache\n")])]),e._v(" "),a("p",[e._v("#kill掉进程")]),e._v(" "),a("p",[e._v("测试：")]),e._v(" "),a("pre",[a("code",[e._v("telnet 192.168.1.3 11211\n")])]),e._v(" "),a("p",[e._v("连接不上修改防火墙")])])}),[],!1,null,null,null);t.default=n.exports}}]);